"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 4.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# from photologue.models import PHOTOLOGUE_PATH

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-r+e--j-unh$4&kyb-&4v14tuz7m&yhkbxbg+m2o9ft)jjj&t8c"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["192.168.0.207", "39.106.57.99", "127.0.0.1", '192.168.31.54']

# Application definition

INSTALLED_APPS = [
    "daphne",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "loginapp",
    "imageapp",
    "camera",
    # "single_camera",
    "channels",
    "rest_framework",
    "photologue",
    "sortedm2m",
    "productionImages",
    "plc",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "myproject.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [str(BASE_DIR / "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "myproject.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }

mysql_cnf = BASE_DIR / "mysql.cnf"
if mysql_cnf.is_file():
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'OPTIONS': {'read_default_file': str(BASE_DIR / "mysql.cnf")}
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME":
        "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME":
        "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME":
        "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME":
        "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

# LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

LANGUAGE_CODE = 'zh-Hans'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "static_files"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

ASGI_APPLICATION = "myproject.asgi.application"

SITE_ID = 1
LOGIN_URL = 'login'

# CHANNEL_LAYERS = {
#     "default": {
#         "BACKEND": "channels_redis.core.RedisChannelLayer",
#         "CONFIG": {
#             "hosts": [("127.0.0.1", 6379)],
#         },
#     },
# }

import unicodedata
from django.utils.encoding import force_str


def photo_upload_to(instance, filename):
    filename = unicodedata.normalize('NFKD', force_str(filename)).encode(
        'ascii', 'ignore').decode('ascii')
    gallery_title = filename.split("_")[0]
    _ind = gallery_title.rfind("-")
    _ind = len(gallery_title) if _ind == -1 else _ind
    product = gallery_title[:_ind]
    file_path = str(MEDIA_ROOT / "photologue" / product / gallery_title / filename)
    return file_path


PHOTOLOGUE_PATH = photo_upload_to
PHOTOLOGUE_IMAGE_FIELD_MAX_LENGTH = 150

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'socket': {
            'level': 'DEBUG',
            'class': 'myproject.logging_handlers.PickleSocketHandler',
            'host': 'localhost',
            'port': 9020,
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'django.log',  # 指定日志文件的名称和路径
            'formatter': 'standard',  # 指定使用哪个格式器
        },
    },
    'formatters': {
        'standard': {
            'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s'
        },
    },
    'loggers': {
        'django': {
            'handlers': ['socket', 'file'],  # 同时使用 socket 和 file 处理器
            'level': 'INFO',
            'propagate': False,
        },
    },
}

ONNX_PATH = str(BASE_DIR / "eighteen_camera.onnx")
CONF_THRES = 0.3
IOU_THRES = 0.5
NG_IDS = [0, 1, 2, 3, 4, 5]
CAMERA_NUM = 4
